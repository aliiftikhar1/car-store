generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String   @db.LongText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  CarSubmission   CarSubmission[]

}

model User {
  id          Int      @id @default(autoincrement())
  name        String
  email       String   @unique
  image       String?  @db.LongText
  username    String?  @unique
  bio         String?
  address     String?
  city        String?
  country     String?
  province    String?
  zipcode     String?
  cardName    String?
  cardNumber  String?
  cardExpiry  String?
  cardCvc     String?
  password    String
  type        String
  status      String
  verified    Boolean
  phoneNo     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  Auctions    Auction[]   @relation("SellerAuctions")
  Bids        Bidding[]   @relation("UserBids")
  Submissions CarSubmission[]
  Sold        Sold[]
  Watching    Watching[]
}

model CarSubmission {
  id               Int      @id @default(autoincrement())
  firstname        String
  lastname         String
  email            String
  phone            String
  category         String?
  bodyType          String?
  transmission      String?
  engineCapacity    String?
  fuelType          String?
  exteriorColor     String?
  condition         String?
  vehicleModel     String
  vehicleMake      String
  vehicleYear      String
  sellerId         Int
  notes            String?    @db.Text
  description      String?    @db.LongText
  highlights       String?    @db.LongText
  specs            String?    @db.Text
  review           String?
  vin              String
  mileage          String
  mileageUnit      String
  status           String
  price            String     @default("0")
  currency         String     @default("0")
  country          String
  postal           String
  brand            Int?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  Brand            Brand?     @relation(fields: [brand], references: [id], onDelete: Cascade)
  User             User       @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  SubmissionImages CarSubmissionImage[]
  Auction          Auction[]
  Bidding           Bidding[]
}


model CarSubmissionImage {
  id            Int      @id @default(autoincrement())
  submissionId  Int
  name          String
  label         String?
  type          String
  size          Int
  data          String   @db.LongText
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  CarSubmission CarSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model Auction {
  id           Int      @id @default(autoincrement())
  startDate    DateTime
  endDate      DateTime
  carId        Int
  sellerId     Int
  views        Int      @default(0)
  watching     Int      @default(0)
  location     String
  closingPrice String
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  CarSubmission          CarSubmission      @relation(fields: [carId], references: [id], onDelete: Cascade)
  Seller       User     @relation("SellerAuctions", fields: [sellerId], references: [id], onDelete: Cascade)
  Bids         Bidding[]
  Sold          Sold[]
  Watching      Watching[]
}

model Watching {
  id        Int      @id @default(autoincrement())
  userId    Int
  auctionId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation( fields: [userId], references: [id], onDelete: Cascade)
  Auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
}

model Bidding {
  id        Int      @id @default(autoincrement())
  auctionId Int
  userId    Int
  carId     Int
  currency  String
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  User      User     @relation("UserBids", fields: [userId], references: [id], onDelete: Cascade)
  CarSubmission CarSubmission @relation(fields:[carId], references:[id], onDelete:Cascade)
  
}

model Sold{
  id          Int     @id @default(autoincrement())
  auctionId    Int
  userId        Int
  price         Int
  currency      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  Auction       Auction     @relation(fields:[auctionId],references:[id],onDelete:Cascade)
  User          User        @relation(fields:[userId],references:[id],onDelete:Cascade)

}